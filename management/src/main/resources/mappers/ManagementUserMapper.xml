<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lettuce.management.dao.ManagementUserDao">
    <resultMap id="UserResultMap" type="com.lettuce.management.entity.User">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="salt" jdbcType="VARCHAR" property="salt"/>
        <result column="nickName" jdbcType="VARCHAR" property="nickName"/>
        <result column="headImgUrl" jdbcType="VARCHAR" property="headImgUrl"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="lastLoginTime" jdbcType="TIMESTAMP" property="lastLoginTime"/>
        <result column="createTime" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="createUserId" jdbcType="INTEGER" property="createUserId"/>
        <result column="gmtTime" jdbcType="TIMESTAMP" property="gmtTime"/>
        <result column="gmtUserId" jdbcType="INTEGER" property="gmtUserId"/>
    </resultMap>
    <sql id="User_List">
        mu.id, mu.username, mu.password, mu.salt, mu.nickName, mu.headImgUrl,
        mu.phone, mu.status, mu.lastLoginTime, mu.createTime, mu.createUserId,
        mu.gmtTime, mu.gmtUserId
    </sql>
    <sql id="where">
        <where>
            <if test="params !=null and params != ''">
                <if test="params.username != null and params.username != ''">
                    and mu.username like concat('%', #{params.username}, '%')
                </if>
                <if test="params.nickName != null and params.nickName != ''">
                    and mu.nickName like concat('%', #{params.nickName}, '%')
                </if>
                <if test="params.status != null and params.status != ''">
                    and mu.status = #{params.status}
                </if>
            </if>
        </where>
    </sql>
    <update id="lastLogin">
        update management_user
        <set>
            lastLoginTime = now()
        </set>
        where id = #{id}
    </update>
    <select id="getUser" resultMap="UserResultMap">
        select
        <include refid="User_List"/>
        from management_user as mu
        where mu.username = #{username}
    </select>
    <insert id="saveUser">
        insert into management_user
        (username, password, salt, nickName, headImgUrl, phone, status, createTime, createUserId)
        values(#{username}, #{password}, #{salt}, #{nickName}, #{headImgUrl}, #{phone}, #{status}, now(), #{createUserId})
    </insert>
    <update id="updateUser">
        update management_user
        <set>
            <if test="user.username != null">
                username = #{user.username},
            </if>
            <if test="user.nickName != null">
                nickName = #{user.nickName},
            </if>
            <if test="user.headImgUrl != null">
                headImgUrl = #{user.headImgUrl},
            </if>
            <if test="user.phone != null">
                phone = #{user.phone},
            </if>
            <if test="user.status != null">
                status = #{user.status},
            </if>
            gmtUserId = #{user.gmtUserId},
            gmtTime = now()
        </set>
        where id = #{user.id}
    </update>
    <update id="changePassword">
        update management_user set password = #{passwordEncoder}, gmtUserId = #{gmtUserId}, gmtTime = now() where id = #{id}
    </update>
    <select id="count" resultType="int">
        select count(1) from management_user as mu
        <include refid="where"/>
    </select>
    <select id="list" resultMap="UserResultMap">
        select
        <include refid="User_List"/>
        from management_user as mu
        <include refid="where"/>
        ${params.orderBy}
        limit #{offset}, #{limit}
    </select>
    <select id="getByUserId" resultMap="UserResultMap">
        select
        <include refid="User_List"/>
        from management_user as mu
        where id = #{id}
    </select>
    <delete id="deleteUserRole">
        delete from management_user_role where userId = #{userId}
    </delete>
    <insert id="saveUserRoles">
        insert into management_user_role (roleId, userId, createTime, createUserId) values
        <foreach collection="roleIds" item="roleId" separator=",">
            (#{roleId}, #{userId}, now(), #{createUserId})
        </foreach>
    </insert>
    <select id="getAppIdByUserId" resultType="String">
        select appId
        from management_user_appid
        where userId = #{userId}
    </select>
</mapper>